package;

import flixel.util.FlxDestroyUtil;
import haxe.Timer;
import flixel.util.FlxTimer;
import haxe.Int64;
import flixel.system.debug.watch.EditableTextField;
import lime.utils.Bytes;
import lime.media.openal.ALSource;
import lime.media.openal.ALBuffer;
import lime.media.openal.ALFilter;
import flixel.FlxG;
import flixel.FlxGame;
import flixel.FlxBasic;
import flixel.tweens.FlxTween;
import flixel.system.FlxSound;
#if desktop
import lime.utils.UInt8Array;
import lime.media.vorbis.VorbisFile;
import lime.media.openal.AL;
import lime.media.vorbis.VorbisInfo;
#end

class AudioThing extends FlxBasic
{
	// DD: Ripped from my drums mod
	// DD: OpenAL doesn't work on HTML5, so fallback to FlxG.sound when on web
	#if desktop
	var vorb:VorbisFile;
	var _length:Float;
	var _volume:Float = 1.0;
	var audioSource:ALSource;
	var audioBuffers:Array<ALBuffer>;
	#else
	var elseSound:FlxSound;
	#end

	public var fadeTween:FlxTween;

	public var volume(get, set):Float;
	public var time(get, never):Float;
	public var speed(get, set):Float;
	public var playing(get, never):Bool;
	public var stopped(get, never):Bool;
	public var length(get, never):Float;

	// var _lostFocus:Bool = false;
	// public var lostFocus(get, never):Bool;
	public var gamePaused:Bool = false;

	public static var NUM_BUFFERS = 4;
	public static var BUFFER_SIZE = 65536;

	var cursor:Int;
	var state:Int;

	var vorbChannels:Int;
	var vorbRate:Int;
	var bufferToReplace = 0;
	var dataLength:Int;
	var timeOffset:Int = 0;
	var absoluteTime:Float = 0;

	// var timer:FlxTimer;
	// public var onComplete:Void->Void;

	public override function new(filePath:String)
	{
		#if desktop
		// DD: Use OpenAL manually for music to allow for speed change
		if (sys.FileSystem.exists(filePath))
		{
			vorb = VorbisFile.fromFile(filePath);
		}
		else
		{
			trace("AUDIO " + filePath + " DOESN'T EXIST");
			return;
		}
		audioSource = AL.createSource();
		// sndData = SyllableSound.readVorbisFileBuffer(vorb);
		var vorbInfo:VorbisInfo = vorb.info();
		vorbChannels = AL.FORMAT_STEREO16;
		if (vorbInfo.channels <= 1)
			vorbChannels = AL.FORMAT_MONO16;
		vorbRate = vorbInfo.rate;
		trace("THIS IS YOUR RATE: " + vorbRate);
		_length = Std.int(vorb.timeTotal() * 1000);
		dataLength = Std.int(vorbRate * vorbInfo.channels * 16 * vorb.timeTotal() / 8);
		audioBuffers = AL.genBuffers(NUM_BUFFERS);
		for (i in 0...NUM_BUFFERS)
		{
			// var subBytes = Bytes.alloc(BUFFER_SIZE);
			// subBytes.blit(0, sndData.buffer, i * BUFFER_SIZE, BUFFER_SIZE);
			// var tinyBuffer = UInt8Array.fromBytes(subBytes);
			var data = readVorbisFileBuffer(vorb, BUFFER_SIZE);
			AL.bufferData(audioBuffers[i], vorbChannels, data, data.length, vorbRate);
		}
		timeOffset = Std.int(vorb.timeTell() * 1000);
		AL.sourceQueueBuffers(audioSource, NUM_BUFFERS, audioBuffers);
		#else
		elseSound = new FlxSound().loadEmbedded(filePath);
		elseSound.onFinish = onFinish;
		#end
		super();
	}

	public override function destroy()
	{
		stop();
		AL.sourcei(audioSource, AL.BUFFER, null);
		AL.deleteSource(audioSource);
		AL.deleteBuffers(audioBuffers);
		audioBuffers = null;
		// FlxDestroyUtil.destroy(timer);
		super.destroy();
	}

	public override function update(elapsed:Float):Void
	{
		#if desktop
		if (audioSource != null)
		{
			if (FlxG.sound.muted)
				AL.sourcef(audioSource, AL.GAIN, 0);
			else
				AL.sourcef(audioSource, AL.GAIN, _volume * FlxG.sound.volume);
		}
		if (state == AL.PLAYING)
		{
			updateStream();
			state = AL.getSourcei(audioSource, AL.SOURCE_STATE);
		}
		#end
		trace(Conductor.songPosition + " vs. " + time + " / " + length);
		super.update(elapsed);
	}

	function updateStream()
	{
		var buffersProcessed = 0;
		buffersProcessed = AL.getSourcei(audioSource, AL.BUFFERS_PROCESSED);
		if (buffersProcessed <= 0)
			return;
		while (buffersProcessed != 0)
		{
			trace("CURRENT CURSOR: " + cursor + " / " + dataLength);
			buffersProcessed--;
			var bufferArray = AL.sourceUnqueueBuffers(audioSource, 1);
			var buffer = bufferArray[0];
			var dataSizeToCopy = BUFFER_SIZE;
			if (cursor + BUFFER_SIZE > dataLength)
			{
				dataSizeToCopy = dataLength - cursor;
			}
			// // var subBytes = Bytes.alloc(dataSizeToCopy);
			// subBytes.blit(0, sndData.buffer, cursor, dataSizeToCopy);
			// var tinyBuffer = UInt8Array.fromBytes(subBytes);
			if (cursor < dataLength)
			{
				var data = readVorbisFileBuffer(vorb, dataSizeToCopy);
				AL.bufferData(buffer, vorbChannels, data, data.length, vorbRate);
				AL.sourceQueueBuffers(audioSource, 1, bufferArray);

				cursor += dataSizeToCopy;
			}
		}
	}

	public function play()
	{
		#if desktop
		if (audioSource != null)
		{
			AL.sourcePlay(audioSource);
			cursor = BUFFER_SIZE * NUM_BUFFERS;
			state = AL.PLAYING;
			trace('lol wut');
			// if (timer == null || !timer.active)
			// {
			// 	timer = new FlxTimer();
			// 	timer.start((length - time)/1000, function(tmr)
			// 	{
			// 		trace('DO THE THING');
			// 		stop();
			// 		onComplete();
			// 		FlxDestroyUtil.destroy(tmr);
			// 	});
			// 	trace('FLXTIMER ADDED');
			// }
		}
		#else
		elseSound.play();
		#end
	}

	public function pause()
	{
		#if desktop
		if (audioSource != null)
			AL.sourcePause(audioSource);
		// if (timer != null)
		// {
		// 	timer.cancel();
		// 	FlxDestroyUtil.destroy(timer);
		// 	timer = null;
		// 	trace('FLXTIMER DEAD A BIT');
		// }
		#else
		elseSound.pause();
		#end
	}

	public function stop()
	{
		#if desktop
		if (audioSource != null)
			AL.sourceStop(audioSource);
		// if (timer != null)
		// {
		// 	timer.cancel();
		// 	FlxDestroyUtil.destroy(timer);
		// 	timer = null;
		// 	trace('FLXTIMER DEAD AS HELL');
		// }
		#else
		elseSound.stop();
		#end
	}

	public inline function muteAfterTimeElapsed(Duration:Float = 1):Void
	{
		if (fadeTween != null)
			fadeTween.cancel();
		fadeTween = FlxTween.num(1, 1, Duration, {
			onComplete: function(_)
			{
				volume = 0;
			}
		});

		return;
	}

	inline function get_playing():Bool
	{
		#if desktop
		if (audioSource != null)
			return (AL.getSourcei(audioSource, AL.SOURCE_STATE) == AL.PLAYING);
		#else
		return elseSound.playing;
		#end
		return false;
	}

	inline function get_stopped():Bool
	{
		#if desktop
		if (audioSource != null)
			return (AL.getSourcei(audioSource, AL.SOURCE_STATE) == AL.STOPPED);
		#else
		return !elseSound.playing;
		#end
		return false;
	}

	inline function get_length():Float
	{
		#if desktop
		if (audioSource != null)
			return _length;
		#else
		return elseSound.length;
		#end
		return 0;
	}

	inline function get_volume():Float
	{
		#if desktop
		if (audioSource != null)
			return _volume;
		#else
		return elseSound.volume;
		#end
		return 0;
	}

	inline function set_volume(newVol:Float):Float
	{
		#if desktop
		if (audioSource != null)
			_volume = newVol;
		#else
		elseSound.volume = newVol;
		#end
		return newVol;
	}

	inline function get_time():Float
	{
		#if desktop
		if (audioSource != null)
		{
			absoluteTime = Math.max(absoluteTime, (Std.int(vorb.timeTell() * 1000) + Std.int(AL.getSourcef(audioSource, AL.SEC_OFFSET) * 1000) - timeOffset));
			return absoluteTime;
		}
		#else
		return elseSound.length;
		#end
		return 0;
	}

	// function set_time(newTime:Float):Float
	// {
	// 	#if desktop
	// 	if (audioSource != null)
	// 		AL.sourcef(audioSource, AL.SEC_OFFSET, newTime / 1000);
	// 	#else
	// 	elseSound.time = newTime;
	// 	#end
	// 	return newTime;
	// }

	inline function get_speed():Float
	{
		#if desktop
		if (audioSource != null)
			return AL.getSourcef(audioSource, AL.PITCH);
		#else
		return 1.0;
		#end
		return 0;
	}

	function set_speed(newSpeed:Float):Float
	{
		#if desktop
		if (audioSource != null)
		{
			AL.sourcef(audioSource, AL.PITCH, newSpeed);
		}
		return newSpeed;
		#end
		return 1.0;
	}

	// inline function get_lostFocus():Bool
	// {
	// 	return _lostFocus;
	// }
	// public function loseFocus()
	// {
	// 	_lostFocus = true;
	// 	if (!gamePaused)
	// 		pause();
	// }
	// public function regainFocus()
	// {
	// 	_lostFocus = false;
	// 	if (!gamePaused)
	// 		play();
	// }

	private function readVorbisFileBuffer(vorbisFile:VorbisFile, length:Int):UInt8Array
	{
		var buffer = new UInt8Array(length);
		var read = 0, total = 0, readMax;

		while (total < length)
		{
			readMax = 4096;

			if (readMax > length - total)
			{
				readMax = length - total;
			}

			read = vorbisFile.read(buffer.buffer, total, readMax);

			if (read > 0)
			{
				total += read;
			}
			else
			{
				break;
			}
		}

		return buffer;
	}
}
